#when finished will have improved graph, can go higher than eleven, and writes the numbers to the axis, depending on how high the first values are (1-10, 10-100, 100-1000, etc), adding numbers will work, and maybe some other shit.
#i'm gonna try subtracting on each looop instead of adding (to the x var) --- note, this has been revoked to the earlier version ---
#any commented out code is assumed redundant, but there just in case

#!!!!! --- I have stayed up till 23:00 to get this code in working condition. All basic rules work (i.e. x*x, x*number, x+number) So yeah... Happy about that, might go to sleep soon. I hope to introduce those letters onto the graph soon, then maybe a GUI to enter the rule instead of the shell. --- !!!!!
#annnd i need to make the lines not overspill the cartesian plane. Anyway, i can do that tomorrow.



#permanent, last edited, rev 1:
#Hi, whoever is reading this is about to be very annoyed. I only learnt about definitons for functions halfway through this projecct, so there are none. I will use them next time. Sorry!
#end comment.

#import modules
import pygame
import time
import math
from pygame.locals import*

#we will be flipping the display often
def flip():
    pygame.display.flip()
    
#set the icon first
icon = pygame.image.load('icon.png')
pygame.display.set_icon(icon)
 
#basic math variables
sin = math.sin
cos = math.cos
tan = math.tan
x = (-10)
#mx = (-5)
xbase = int(295)
ybase = int(368)
loops = int(0)
drawbuttonclicked = False
xvalue = xbase
yvalue = ybase
shiftpressed = False

#gap to move per coordinate
moveval = 57

#set image variables for import
#unclicked buttons
plane_image = pygame.image.load('axis.png')
exit_button_image_unclicked = pygame.image.load('exit_button_unclicked.png')
clear_button_image_unclicked = pygame.image.load('clear_button_unclicked.png')
draw_button_image_unclicked = pygame.image.load('draw_button_unclicked.png')

#clicked buttons
exit_button_image_clicked = pygame.image.load('exit_button_clicked.png')
clear_button_image_clicked = pygame.image.load('clear_button_clicked.png')
draw_button_image_clicked = pygame.image.load('draw_button_clicked.png')

#quit_message display (error etc.)
quit_message = pygame.image.load('quit_message.png')

#numbers for plane
number_one = pygame.image.load('numberone.png')

#setup the display window
(width, height) = (593, 662)
screen = pygame.display.set_mode((width, height))
running = True

#set colour variables
white = (255,  255,  255)
black = (0,  0,  0)

#give the display window a title
pygame.display.set_caption('Graphing Program')

#some button variables (bit late sorry)
buttonyvariable = 30
spacing = 51
buttonlength = 128

#some standard spacing/variables for common use
standardspacing = 52.25
absolutezero = (295,  368)

#is the button clicked? hmm
drawbuttonclicker = False
clearbuttonclicker = False
exitbuttonclicker = False

#colour the background again to erase whatever is above
background_colour = (white)
screen.fill(background_colour)

#bop it, twist it, flip it
flip

raw = raw_input('y =')
minusraw = "m" + raw

pointlist = [] #point list for the variables
#minuspointlist = []  
 
def pointfulfill():
    pointlist.append( (xvalue,  yvalue),  )
  
def minuspointfulfill():
    minuspointlist.append( (minusxvalue, minusyvalue),  )
    
while loops < 800: #repeat the rule thingamy

    y = eval(raw)
    x = x
    
#    my = eval(minusraw)
#    mx = mx
    
#    if loops < 2:
#        if y > 10:
#            print('the rule created a value that was too large')
#            screen.blit(quit_message,  (0, 0))
#            flip()
#            time.sleep(5)
#            quit()
#        elif y < 10:
#            pass
#    else:
#        pass


    
    if x > 0 and y < 0:
        xvalue = 295 + moveval * x
    elif x < 0 and y < 0:
        xvalue = 295 + moveval * x
    elif x < 0 and y > 0:
        xvalue = 295 + moveval * x
    elif x > 0:
        xvalue = 295 + moveval * x
    elif x < 0:
        xvalue = 295 - moveval * x
    elif x == 0:
        xvalue = 295
    
    if y > 0:
        yvalue = 368 - moveval * y
    elif y < 0:
        yvalue = 368 + moveval * (-1*y)
    elif y == 0:
        yvalue = 368
        
#    if mx > 0:
#        minusxvalue = 295 + moveval * x
#    elif mx < 0:
#        minusxvalue = 295 - moveval * x
#    elif x == 0:
#        mxvalue = 295
#    
#    if my > 0:
#        minusyvalue = 368 - moveval * my
#    elif my < 0:
#        minusyvalue = 368 + moveval * (-1*my)
#    elif my == 0:
#        minusyvalue = 368
        
        
    print('y:')
    print(y)
    print('x:')
    print(x)
    
    print('xvalue:')
    print(xvalue)
    print('yvalue:')
    print(yvalue)
#    print('minusxvalue:')
#    print(minusxvalue)
#    print('minusyvalue:')
#    print(minusyvalue)
    
    x = x+0.1
#    mx = mx+0.1
    
    loops = loops+1

    pointfulfill() #at the end, so the adding works (hopefully)
#    minuspointfulfill()


#this makes the program stop when it unnececarily does shit so it doesn't eat up cpu time
    if xvalue > 583:
        loops = 800
#    if yvalue > 654:
#        loops = 800
#    if x < -10:
#        loops = 800
#    if y < -10:
#        loops = 800
#    if yvalue < 80:
#        loops = 800
    
#    if minusxvalue > 292:
#        loops = 800
#    if minusyvalue > 612:
#        loops = 800
#    if minusxvalue < 10:
#        loops = 800
#    if minusyvalue <  60:
#        loops = 800

def drawlines():
    #draw an antialiased line between two points
    pygame.draw.aalines(screen,  black,  False,  pointlist,  10)
#    pygame.draw.aalines(screen,  black,  False,  minuspointlist, 10)

def reset():
    #colour the background again to erase whatever is above
    background_colour = (white)
    screen.fill(background_colour)
    #place the cartesian pane
    screen.blit(plane_image,  (10, 80))
    #bop it, twist it, flip it
    flip()
    drawbuttonclicked = False
    
#keep the window active, and also control if it shuts down
while running:
    
    #find the mouse
    mouse_position = pygame.mouse.get_pos()
    
    #place the cartesian pane
    screen.blit(plane_image,  (10, 80))
    
    #place buttons at the top
    #draw button
    if drawbuttonclicker == False:
         screen.blit(draw_button_image_unclicked,  (spacing, buttonyvariable))
    else:
        screen.blit(draw_button_image_clicked,  (spacing, buttonyvariable))
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            drawbuttonclicked = True
    
    #clear button
    if clearbuttonclicker == False:
         screen.blit(clear_button_image_unclicked,  ((spacing+spacing+buttonlength),  buttonyvariable))
    else:
         screen.blit(clear_button_image_clicked,  ((spacing+spacing+buttonlength),  buttonyvariable))
         if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
             reset()
    
    #exit button
    if exitbuttonclicker == False:
         screen.blit(exit_button_image_unclicked,  ((spacing+spacing+spacing+buttonlength+buttonlength),  buttonyvariable))
    else:
        screen.blit(exit_button_image_clicked,  ((spacing+spacing+spacing+buttonlength+buttonlength),  buttonyvariable))
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            running = False
            pygame.quit()
   
    #draw the grpahed line onto the plane depending on if draw is clicked
    if drawbuttonclicked == True:
        drawlines()
    else:
        pass
    #flip the display
    flip()
    
    #detect if the mouse is above buttons
    #draw button
    if draw_button_image_unclicked.get_rect(x=(spacing),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         drawbuttonclicker = True
    else:
        drawbuttonclicker = False
     
    #clear button
    if clear_button_image_unclicked.get_rect(x=(spacing+spacing+buttonlength),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         clearbuttonclicker = True
    else:
        clearbuttonclicker = False
        
     
    #exit button 
    if exit_button_image_unclicked.get_rect(x=(spacing+spacing+spacing+buttonlength+buttonlength),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         exitbuttonclicker = True
    else:
        exitbuttonclicker = False
     
    #event dependent functions
    for event in pygame.event.get():
         if event.type == pygame.QUIT:
            running = False
            pygame.quit()
