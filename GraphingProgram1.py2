#Hi, whoever is reading this is about to be very annoyed. I only learnt about definitons for functions halfway through this projecct, so there are none. I will use them next time. Sorry!

#import modules
import pygame
import time
import math
from pygame.locals import*

#we will be flipping the display often
def flip():
    pygame.display.flip()
    
#basic math variables
x = int(239)
y = int(239)
xbase = int(239)
loops = int(0)
drawbuttonclicked = False

#set image variables for import
#unclicked buttons
plane_image = pygame.image.load('axis.png')
exit_button_image_unclicked = pygame.image.load('exit_button_unclicked.png')
clear_button_image_unclicked = pygame.image.load('clear_button_unclicked.png')
draw_button_image_unclicked = pygame.image.load('draw_button_unclicked.png')
#clicked buttons
exit_button_image_clicked = pygame.image.load('exit_button_clicked.png')
clear_button_image_clicked = pygame.image.load('clear_button_clicked.png')
draw_button_image_clicked = pygame.image.load('draw_button_clicked.png')

#setup the display window
(width, height) = (504, 550)
screen = pygame.display.set_mode((width, height))
running = True

#set colour variables
white = (255,  255,  255)
black = (0,  0,  0)

#colour the background
background_colour = (white)
screen.fill(background_colour)

#give the display window a title
pygame.display.set_caption('Graphing Program')

#push the window to the GUI
flip()

#some button variables (bit late sorry)
buttonyvariable = 30
spacing = 30
buttonlength = 128

#some standard spacing/variables for common use
standardspacing = 30
absolutezero = (239, 239)

#is the button clicked? hmm
drawbuttonclicker = False
clearbuttonclicker = False
exitbuttonclicker = False

#colour the background again to erase whatever is above
background_colour = (white)
screen.fill(background_colour)

#bop it, twist it, flip it
flip

#coordinate variables
raw = raw_input('y =')#at this point, y = the rule, or y = x for testing purposes
y = raw
print(raw)

gap = 17 #gap between points on the image
xvalue = x #at this point xvalue = x = 239
yvalue = (eval(y))#has been at this point y = raw input and yvalue = the evaluated form of raw input (the rule has been calculated)
y = (eval(y))

gradient = yvalue/x #using yvalue instead of y because we need it to be evaluated first, and i can't be bothered to change this yet


 #some intercepts
pointlist = [ ] #this is the pointlist for the line(s)

print('gradient:')
print(gradient)
 
##yvalue = 239
 
while loops < 200: #repeat the rule thingamy
    pointlist.append( (xvalue,  yvalue),  )#first time, sets to 239,239 then after that, it sets to whatever was set last time around
    yvalue = y
    xvalue = x
    x = x+17
    y = y-17
    loops = loops+1#add to the loops variable to control how many times it loops.

print(pointlist)
def drawlines():
    #draw an antialiased line between two points
    pygame.draw.aalines(screen,  black,  False,  pointlist,  0)

def reset():
    #colour the background again to erase whatever is above
    background_colour = (white)
    screen.fill(background_colour)
    #place the cartesian pane
    screen.blit(plane_image,  ((spacing), (spacing)))
    #bop it, twist it, flip it
    flip()
    drawbuttonclicked = False
#keep the window active, and also control if it shuts down
while running:
    #find the mouse
    mouse_position = pygame.mouse.get_pos()
    
    #place the cartesian pane
    screen.blit(plane_image,  ((spacing), (spacing)))
    
    #place buttons at the top
    #draw button
    if drawbuttonclicker == False:
         screen.blit(draw_button_image_unclicked,  (spacing, buttonyvariable))
    else:
        screen.blit(draw_button_image_clicked,  (spacing, buttonyvariable))
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            drawbuttonclicked = True
    
    #clear button
    if clearbuttonclicker == False:
         screen.blit(clear_button_image_unclicked,  ((spacing+spacing+buttonlength),  buttonyvariable))
    else:
         screen.blit(clear_button_image_clicked,  ((spacing+spacing+buttonlength),  buttonyvariable))
         if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
             reset()
    
    #exit button
    if exitbuttonclicker == False:
         screen.blit(exit_button_image_unclicked,  ((spacing+spacing+spacing+buttonlength+buttonlength),  buttonyvariable))
    else:
        screen.blit(exit_button_image_clicked,  ((spacing+spacing+spacing+buttonlength+buttonlength),  buttonyvariable))
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            running = False
            pygame.quit()
   
    #draw the grpahed line onto the plane depending on if draw is clicked
    if drawbuttonclicked == True:
        drawlines()
    else:
        pass
    #flip the display
    flip()
    
    #detect if the mouse is above buttons
    #draw button
    if draw_button_image_unclicked.get_rect(x=(spacing),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         drawbuttonclicker = True
    else:
        drawbuttonclicker = False
     
    #clear button
    if clear_button_image_unclicked.get_rect(x=(spacing+spacing+buttonlength),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         clearbuttonclicker = True
    else:
        clearbuttonclicker = False
        
     
    #exit button 
    if exit_button_image_unclicked.get_rect(x=(spacing+spacing+spacing+buttonlength+buttonlength),  y=(buttonyvariable)).collidepoint(pygame.mouse.get_pos()):
         exitbuttonclicker = True
    else:
        exitbuttonclicker = False
     
    #event dependent functions
    for event in pygame.event.get():
         if event.type == pygame.QUIT:
            running = False
            pygame.quit()
